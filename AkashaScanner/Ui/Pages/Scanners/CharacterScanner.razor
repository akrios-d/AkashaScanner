@inherits RazorComponent
@page "/scanners/character"

@using Core.DataCollections
@using Core.Scappers

@inject IConfig ScrapConfig
@inject ICharacterCollection CharacterCollection
@inject IScrapper<ICharacterConfig> CharacterScrapper

<Scanner Model="@Data" Enabled="@Enabled" OnSubmit="@HandleSubmit">
    <Instructions>
        <li>Update game data below if needed.</li>
        <li>Fill in the options below (Optional).</li>
        <li>Start the game. Game is currently <ProcessStatusDisplay />.</li>
        <li>Open your characters screen and sort your characters by level in descending order.</li>
        <li>Select your first character and make sure the left menu (Attributes, Weapons, Artifacts, etc.) is entirely visible.</li>
        <li>Click the "Start" button below to start scanning. Please do not move the mouse or press any buttons.</li>
        <li>If you wish to interrupt the scan, minimize or exit the game (using Alt+Tab).</li>
    </Instructions>
    <DataUpdates>
        <DataUpdate Title="Characters" Collection="@CharacterCollection" Status="@CharacterCollectionStatus" EntryType="@(typeof(CharacterEntry))" />
    </DataUpdates>
    <Options>
        <Field Label="@MinLevelLabel">
            <InputNumber class="input" DisplayName="@MinLevelLabel" @bind-Value="Data.CharacterMinLevel" />
        </Field>
    </Options>
</Scanner>

@code {
    private const string MinLevelLabel = "Minimum Level";

    private ICharacterConfig Data = new DefaultFormData();

    [Flux.GetDataCollectionStatus(typeof(CharacterEntry))]
    public Flux.DataCollectionStatus CharacterCollectionStatus { get; set; } = default!;

    [Flux.GetProcessStatus]
    public ProcessStatus Status { get; set; }

    public bool Enabled => CharacterCollectionStatus.IsAvailable;

    protected override async Task OnInitializedAsync()
    {
        Initialize();
        await ScrapConfig.Load();
        Data = new FormData(ScrapConfig);
    }

    public bool HandleSubmit()
    {
        ScrapConfig.Save();
        return CharacterScrapper.Start(Data);
    }

    public override void Dispose()
    {
        base.Dispose();
        CharacterScrapper.Dispose();
    }

    private class FormData : ICharacterConfig
    {
        private readonly ICharacterConfig ScrapConfig;

        public FormData(ICharacterConfig scrapConfig)
        {
            ScrapConfig = scrapConfig;
        }

        [Display(Name = MinLevelLabel)]
        [Required]
        [Range(1, 90)]
        public int CharacterMinLevel { get => ScrapConfig.CharacterMinLevel; set => ScrapConfig.CharacterMinLevel = value; }
    }

    private class DefaultFormData : ICharacterConfig
    {
        public int CharacterMinLevel { get; set; }
    }
}
