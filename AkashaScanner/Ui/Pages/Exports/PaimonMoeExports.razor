@inherits RazorComponent
@page "/exports/paimonmoe"

@using Core.Exporters
@using Core.Importers
@using Core.DataFiles
@using Core.DataCollections
@inject IDataFileRepository<AchievementOutput> AchievementDataFiles
@inject IAchievementCollection AchievementCollections
@inject IDataFileRepository<CharacterOutput> CharacterDataFiles
@inject ICharacterCollection CharacterCollections
@inject IPaimonMoeImporter PaimonImporter
@inject IJSRuntime JS
@inject ILogger<IPaimonMoeImporter> Logger

<ExportLayout Enabled="@(SelectedAchievementFile is not null || !string.IsNullOrEmpty(ImportedContent))" OnSubmit="@ExportData">
    <div>
        <!-- Notice for users -->
        <div class="import__notice">
            If you use Paimon.moe not only for achievement tracking (e.g., wish counter),
            consider exporting data from
            <a class="link" href="https://paimon.moe/settings" target="_blank">Paimon.moe</a> first
            and importing it below to avoid overwriting your existing data.
        </div>

        <!-- File Import Form -->
        <form class="import__file">
            <InputFile id="@FileInputId" class="file-input" accept=".json" OnChange="@OnFileChange" />
            <button class="button button--outline reset-button" type="reset" @onclick="@ClearFile">Clear</button>
            <button class="button button--outline reset-button" type="submit" @onclick="@ImportFile">Import</button>
        </form>
    </div>

    <!-- Achievement and Character File Lists -->
    <DataFileList Title="Export Achievements"
    FileList="@AchievementFileList"
    @bind-Value="@SelectedAchievementFile" />

    <DataFileListOptional Title="Export Characters"
    TitleNegative="Do not export characters"
    FileList="@CharacterFileList"
    @bind-Value="@SelectedCharacterFile" />
</ExportLayout>

@code {
    private const string FileInputId = "paimon-moe-exports-file-input";
    private const long MaxFileSize = 10 * 1024 * 1024; // 10 MB

    // Selected files and file lists
    private IDataFile<AchievementOutput>? SelectedAchievementFile { get; set; }
    private List<IDataFile<AchievementOutput>> AchievementFileList { get; set; } = new();
    private IDataFile<CharacterOutput>? SelectedCharacterFile { get; set; }
    private List<IDataFile<CharacterOutput>> CharacterFileList { get; set; } = new();

    // File import state
    private IBrowserFile? UploadedFile { get; set; }
    private string ImportedContent { get; set; } = string.Empty;

    /// <summary>
    /// Initializes the component and loads available data files.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeFileLists();
            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError("Failed to initialize: {Message}", ex.Message);
        }
    }

    /// <summary>
    /// Import file.
    /// </summary>
    private void ImportFile()
    {
        if (!string.IsNullOrWhiteSpace(ImportedContent))
        {
            PaimonImporter.Import(ImportedContent);
            InitializeFileLists(); // Refresh the file lists after importing
            ClearFile(); // Clear the uploaded file state
            StateHasChanged(); // Refresh the UI to reflect updates
        }
    }

    /// <summary>
    /// Clears the uploaded file state.
    /// </summary>
    private void ClearFile()
    {
        UploadedFile = null;
        ImportedContent = string.Empty;
    }

    /// <summary>
    /// Handles file change event and processes the uploaded file.
    /// </summary>
    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        UploadedFile = e.File;
        if (UploadedFile is not null)
        {
            try
            {
                using var stream = UploadedFile.OpenReadStream(MaxFileSize);
                using var reader = new StreamReader(stream, System.Text.Encoding.UTF8);
                ImportedContent = await reader.ReadToEndAsync();               
            }
            catch (Exception ex)
            {
                Logger.LogError("Error reading file: {Message}", ex.Message);
            }
        }
    }

    /// <summary>
    /// Exports the data to a JSON file.
    /// </summary>
    private async Task ExportData()
    {
        if (SelectedAchievementFile is null)
        {
            Logger.LogWarning("No achievement file selected for export.");
            return;
        }

        try
        {
            if (PaimonMoeExporter.Export(out var result, SelectedAchievementFile, ImportedContent, SelectedCharacterFile))
            {
                var timestamp = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");
                await JS.InvokeAsync<bool>("__akasha_saveAsJson", $"paimon-moe_{timestamp}.json", result);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Export failed: {Message}", ex.Message);
        }
    }

    /// <summary>
    /// Initializes file lists for achievements and characters.
    /// </summary>
    private void InitializeFileLists()
    {
        AchievementFileList = AchievementDataFiles.List();
        SelectedAchievementFile = AchievementFileList.FirstOrDefault();

        CharacterFileList = CharacterDataFiles.List();
        SelectedCharacterFile = CharacterFileList.FirstOrDefault();
    }
}
